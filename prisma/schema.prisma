// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       Int           @id @default(autoincrement())
  email                    String        @unique
  username                 String        @unique
  firstName                String
  lastName                 String
  dob                      DateTime
  nrcNo                    String        @unique
  gender                   UserGender    @default(PREFER_NOT_TO_SAY)
  password                 String
  joinedAt                 DateTime      @default(now())
  role                     UserRole      @default(USER)
  // Tokens
  sessionId                String?
  verified                 Boolean       @default(false)
  verifyToken              String?       @unique
  verifyTokenExpire        DateTime?
  resetPasswordToken       String?       @unique
  resetPasswordTokenExpire DateTime?
  Article                  Article[]
  Category                 Category[]
  Subcategory              Subcategory[]
}

// 

model Article {
  id            String       @id @default(uuid())
  type          ArticleType  @default(PRIVATE)
  date          DateTime     @default(now())
  content       Json?
  isPublished   Boolean      @default(false)
  author        User         @relation(fields: [userId], references: [id])
  userId        Int
  category      Category?    @relation(fields: [categoryId], references: [id])
  categoryId    String?
  Subcategory   Subcategory? @relation(fields: [subcategoryId], references: [id])
  subcategoryId String?
}

model Category {
  id          String        @id @default(uuid())
  date        DateTime      @default(now())
  label       String
  author      User          @relation(fields: [userId], references: [id])
  userId      Int
  Article     Article[]
  subcategory Subcategory[]
}

model Subcategory {
  id         String    @id @default(uuid())
  date       DateTime  @default(now())
  label      String
  author     User      @relation(fields: [userId], references: [id])
  userId     Int
  Article    Article[]
  Category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?
}

enum UserRole {
  USER
  ADMIN
}

enum ArticleType {
  PUBLIC
  PRIVATE
}

enum UserGender {
  MALE
  FEMALE
  PREFER_NOT_TO_SAY
}
